{
  "version": 3,
  "file": "ngx-logger.umd.js",
  "sources": [
    "ng://ngx-logger/src/lib/testing/http.service.mock.ts",
    "ng://ngx-logger/src/lib/testing/custom-logger.service.mock.ts",
    "ng://ngx-logger/src/lib/testing/logger.service.mock.ts",
    "ng://ngx-logger/src/lib/logger.module.ts",
    "ng://ngx-logger/src/lib/types/http-meta-data.interface.ts",
    "ng://ngx-logger/src/lib/custom-logger.service.ts",
    "ng://ngx-logger/src/lib/logger.service.ts",
    "ng://ngx-logger/src/lib/utils/logger.utils.ts",
    "ng://ngx-logger/src/lib/config.engine.ts",
    "ng://ngx-logger/src/lib/logger.config.ts",
    "ng://ngx-logger/src/lib/http.service.ts"
  ],
  "sourcesContent": [
    "import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({})\n  }\n}\n",
    "import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n",
    "\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\n\nexport * from './logger.service';\n\nexport * from './logger.config';\n\nexport * from './custom-logger.service';\n\nexport * from './http.service';\n\nexport * from './utils/logger.utils';\nexport * from './types/logger-level.enum';\nexport * from './types/http-meta-data.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n}\n",
    "import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class HttpMetaDataInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    return new NGXLogger(httpService || this.httpService, config, this.platformId);\n  }\n}\n\n\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {isPlatformBrowser} from '@angular/common';\n\nimport {NGXLoggerHttpService} from './http.service';\nimport {NgxLoggerLevel} from './types/logger-level.enum';\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerConfigEngine} from './config.engine';\nimport {NGXLoggerUtils} from './utils/logger.utils';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private _isIE: boolean;\n  private configService: NGXLoggerConfigEngine;\n\n\n  constructor(private readonly httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n    this._isIE = isPlatformBrowser(platformId) &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.configService = new NGXLoggerConfigEngine(loggerConfig);\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.configService.updateConfig(config);\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    if (!message) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n    const config = this.configService.getConfig();\n\n    const callerDetails = NGXLoggerUtils.getCallerDetails();\n\n    if (logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel) {\n\n      const metaData: HttpMetaDataInterface = {\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber,\n      };\n\n      // make sure the stack gets sent to the server\n      message = message instanceof Error ? message.stack : message;\n\n      // Allow logging on server even if client log level is off\n      this.httpService.logOnServer(config.serverLoggingUrl, message, validatedAdditionalParameters, metaData).subscribe((res: any) => {\n          // I don't think we should do anything on success\n        },\n        (error: HttpErrorResponse) => {\n          this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n        }\n      );\n    }\n\n\n    // if no message or the log level is less than the environ\n    if (level < config.level) {\n      return;\n    }\n\n    const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString, callerDetails.fileName, callerDetails.lineNumber);\n\n    // Coloring doesn't work in IE\n    if (this._isIE) {\n      return this._logIE(level, metaString, message, additional);\n    }\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    console.log(`%c${metaString}`, `color:${color}`, message, ...(additional || []));\n  }\n}\n",
    "import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n\n  /**\n   *  This allows us to see who called the logger\n   *  @return {string}\n   *  @private\n   */\n  static getCallerDetails(): {lineNumber: string, fileName: string} {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      }\n    } catch(e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      }\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n       if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next)\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`\n      }\n    });\n  }\n\n}\n",
    "import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = config;\n  }\n\n  getConfig() {\n    return this._config;\n  }\n}",
    "import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n}\n",
    "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly http: HttpClient) {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], metaData: HttpMetaDataInterface): Observable<any> {\n    const body = {\n      message: message,\n      additional: additional,\n      level: metaData.level,\n      timestamp: metaData.timestamp,\n      fileName: metaData.fileName,\n      lineNumber: metaData.lineNumber\n    };\n\n    const options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    };\n\n    return this.http.post(url, body, options)\n  }\n}\n"
  ],
  "names": [
    "of",
    "HttpClientModule",
    "CommonModule",
    "NgModule",
    "tslib_1.__spread",
    "isPlatformBrowser",
    "HttpHeaders",
    "http"
  ],
  "mappings": "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"
}
